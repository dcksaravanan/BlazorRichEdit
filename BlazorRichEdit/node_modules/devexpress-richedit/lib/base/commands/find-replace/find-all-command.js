"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var find_replace_helper_1 = require("../../../core/model/find-replace-helper");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var FindAllCommandOptions = (function (_super) {
    tslib_1.__extends(FindAllCommandOptions, _super);
    function FindAllCommandOptions(control, text, matchCase, highlightResults, results) {
        var _this = _super.call(this, control) || this;
        _this.text = text;
        _this.matchCase = matchCase;
        _this.highlightResults = highlightResults;
        _this.results = results;
        return _this;
    }
    return FindAllCommandOptions;
}(command_base_1.CommandOptions));
exports.FindAllCommandOptions = FindAllCommandOptions;
var FindAllCommand = (function (_super) {
    tslib_1.__extends(FindAllCommand, _super);
    function FindAllCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FindAllCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    FindAllCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var searchSettings = options;
        var foundIntervals = [];
        var findReplaceHelper = new find_replace_helper_1.FindReplaceHelper(this.control.modelManager, this.control.layoutFormatterManager, this.selection, options.subDocument, this.control.layout, function (interval) {
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setIntervals([interval])));
        });
        findReplaceHelper.setSearchParams(searchSettings.text, null, find_replace_helper_1.SearchDirection.All, searchSettings.matchCase, false, 0, false);
        while (findReplaceHelper.findNext() !== find_replace_helper_1.FindReplaceState.SearchEnd) {
            var lastFound = findReplaceHelper.getLastFound();
            foundIntervals.push(lastFound);
        }
        if (searchSettings.highlightResults)
            this.selection.setSearchSelectionIntervals(foundIntervals);
        if (searchSettings.results) {
            searchSettings.results.splice(0, searchSettings.results.length);
            foundIntervals.forEach(function (interval) {
                searchSettings.results.push(interval);
            });
        }
        return true;
    };
    FindAllCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return FindAllCommand;
}(command_base_1.CommandBase));
exports.FindAllCommand = FindAllCommand;
