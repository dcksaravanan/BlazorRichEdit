import { RangeCopy } from '../core/model/manipulators/range/create-range-copy-operation';
import { DomEventHandlersHolder } from '@devexpress/utils/lib/class/event-handlers-holder';
import { IEventManager } from './interfaces/i-event-manager';
import { IRichEditControl } from './interfaces/i-rich-edit-core';
export declare var INPUT_CLASS_NAME: string;
export declare abstract class InputEditorBase<TInpElement extends HTMLElement> {
    eventManager: IEventManager;
    control: IRichEditControl;
    inputElement: TInpElement;
    previousText: string;
    canInsertTextOnInputEvent: boolean;
    needProcessShortcutOnKeyUp: boolean;
    initializedIfNotReadOnly: boolean;
    prevKeyCode: number;
    isIME: boolean;
    private inputWithAlt;
    protected evtHandlersHolder: DomEventHandlersHolder;
    private keyPressTimerId;
    private imeTimerId;
    private onInputTimerId;
    private onBlurTimerId;
    private onKeyUpTimerId;
    constructor(control: IRichEditControl, eventManager: IEventManager, parent: HTMLElement);
    dispose(): void;
    initialize(): void;
    initializeIfNotReadOnly(): void;
    initializeIfNotReadOnlyCore(): void;
    initEvents(): void;
    createHierarchy(parent: HTMLElement): void;
    createHierarchyCore(): void;
    createInputElement(): TInpElement;
    onInput(_evt: KeyboardEvent): void;
    onBlur(_evt: FocusEvent): void;
    onFocus(): void;
    onKeyDown(evt: KeyboardEvent): void;
    private isProcessShortcut;
    onKeyUp(evt: KeyboardEvent): void;
    onKeyPress(evt: KeyboardEvent): void;
    onContextMenu(evt: MouseEvent): void;
    onShortcut(evt: KeyboardEvent): boolean;
    onShortcutCore(evt: KeyboardEvent, shortcutCode: number): void;
    onText(text: string, currentText: string, isUpdated: boolean): void;
    onTextReplace(_text: string, currentText: string): void;
    onTextInput(): void;
    captureFocus(): void;
    canUseInputEvent(): boolean;
    getEditableDocumentText(): string;
    getEditableTextOwner(): HTMLElement;
    setPosition(left: number, top: number): void;
    clearInputElement(): void;
    setEditableDocumentContent(_content: string): void;
    setEditableDocumentCursorPosition(_cursorPosition: number): void;
    selectEditableDocumentContent(): void;
    getEditableDocumentContent(): string;
    abstract getEditableDocument(): HTMLElement | Document;
    getNormalizedEvent(evt: Event): any;
    recreateIfNeeded(): void;
    private getShortcutCode;
}
export declare class DivInputEditor extends InputEditorBase<HTMLElement> {
    private canSkipInputEvent;
    private canSkipFocusAndBlur;
    private handled;
    private cursorWasSetOnLastPosition;
    private clearInputTimerId;
    constructor(control: IRichEditControl, eventManager: IEventManager, parent: HTMLElement);
    dispose(): void;
    initializeIfNotReadOnlyCore(): void;
    setPosition(left: number, top: number): void;
    createInputElement(): HTMLElement;
    onKeyDown(evt: KeyboardEvent): void;
    onKeyUp(evt: KeyboardEvent): void;
    onInput(evt: KeyboardEvent): void;
    onFocus(): void;
    onBlur(evt: FocusEvent): void;
    onShortcutCore(evt: KeyboardEvent, shortcutCode: number): void;
    onTextReplace(text: string, currentText: string): void;
    onTextInput(): void;
    getEditableTextOwner(): HTMLElement;
    captureFocus(): void;
    getEditableDocument(): HTMLElement | Document;
    clearInputElement(): void;
    setEditableDocumentContent(content: string): void;
    setEditableDocumentCursorPosition(cursorPosition: number): void;
    getEditableDocumentText(): string;
    getEditableDocumentFullText(): string;
    getEditableDocumentContent(): string;
    getEditableDocumentCursorPosition(): number;
    selectEditableDocumentContent(): void;
}
export declare class IFrameInputEditor extends InputEditorBase<HTMLIFrameElement> {
    editableDocument: Document;
    private onTextInputTimerId;
    private composUpdateTimerId;
    private composEndTimerId;
    constructor(control: IRichEditControl, eventManager: IEventManager, parent: HTMLElement);
    dispose(): void;
    createHierarchyCore(): void;
    initializeIfNotReadOnlyCore(): void;
    createInputElement(): HTMLIFrameElement;
    initEvents(): void;
    private insertClipboardPicture;
    private insertClipboardRtf;
    captureFocus(): void;
    setPosition(left: number, top: number): void;
    clearInputElement(): void;
    setEditableDocumentContent(content: string): void;
    getEditableDocumentContent(): string;
    selectEditableDocumentContent(): void;
    getEditableDocument(): HTMLElement | Document;
    getEditableTextOwner(): HTMLElement;
    onBlur(evt: FocusEvent): void;
    onShortcutCore(evt: KeyboardEvent, shortcutCode: number): void;
    onTextInput(): void;
    onTextReplace(text: string, currentText: string): void;
    recreateIfNeeded(): void;
    onCompositionStart(_evt: KeyboardEvent): void;
    onCompositionUpdate(_evt: KeyboardEvent): void;
    onCompositionEnd(_evt: KeyboardEvent): void;
    startInputIME(): any;
    updateInputIME(): any;
    endInputIME(): void;
}
export declare class InputController {
    control: IRichEditControl;
    inputEditor: InputEditorBase<HTMLElement>;
    private exporter;
    constructor(control: IRichEditControl, eventManager: IEventManager, parent: HTMLElement);
    dispose(): void;
    private createInputEditor;
    getEditableDocument(): HTMLElement | Document;
    getExportedRangeCopy(): RangeCopy;
    captureFocus(): void;
    setPosition(left: number, top: number): void;
    renderSelectionToEditableDocument(): void;
    setEditableDocumentContent(content: string): void;
    setEditableDocumentCursorPosition(cursorPosition: number): void;
    getEditableDocumentContent(): string;
    selectEditableDocumentContent(): void;
}
//# sourceMappingURL=input-controller.d.ts.map
