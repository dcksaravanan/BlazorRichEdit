"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../../core/model/character/enums");
var string_1 = require("@devexpress/utils/lib/utils/string");
var destination_1 = require("../destination");
var SymbolDestination = (function (_super) {
    tslib_1.__extends(SymbolDestination, _super);
    function SymbolDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SymbolDestination.prototype, "elementHandlerTable", {
        get: function () {
            return {};
        },
        enumerable: true,
        configurable: true
    });
    SymbolDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fontName, code, charCode, symbol, characterFormatting, oldFontName;
            return tslib_1.__generator(this, function (_a) {
                fontName = reader.getAttributeNS('font', this.data.constants.wordProcessingNamespaceConst);
                code = reader.getAttributeNS('char', this.data.constants.wordProcessingNamespaceConst);
                if (string_1.StringUtils.isNullOrEmpty(fontName) || string_1.StringUtils.isNullOrEmpty(code))
                    return [2];
                charCode = parseInt(code, 16);
                if (isNaN(charCode))
                    return [2];
                symbol = String.fromCharCode(charCode);
                characterFormatting = this.data.subDocumentInfo.characterImporter.properties.clone();
                oldFontName = characterFormatting.getUseValue(enums_1.CharacterPropertiesMask.UseFontName) ?
                    characterFormatting.fontInfo.name : null;
                characterFormatting.fontInfo.name = fontName;
                this.data.subDocumentInfo.characterImporter.insertText(symbol);
                characterFormatting.setUseValue(enums_1.CharacterPropertiesMask.UseFontName, false);
                if (oldFontName != null)
                    characterFormatting.fontInfo.name = oldFontName;
                return [2];
            });
        });
    };
    return SymbolDestination;
}(destination_1.ElementDestination));
exports.SymbolDestination = SymbolDestination;
